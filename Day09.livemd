# Day 09

```elixir
# Change working directory to this file's directory.
File.cd(Path.dirname(__ENV__.file))
```

## Parse input

```elixir
input =
  File.read!("inputs/09.txt")
  |> String.trim_trailing()
  |> String.split("\n")

input
```

```elixir
test_input = [
  "0 3 6 9 12 15",
  "1 3 6 10 15 21",
  "10 13 16 21 30 45"
]
```

## Part 1

```elixir
defmodule Part1 do
  def parse_line(line) do
    line
    |> String.split()
    |> Enum.map(&String.to_integer/1)
  end

  def get_differences(seq) do
    seq
    |> Enum.chunk_every(2, 1, :discard)
    |> Enum.map(fn [a, b] -> b - a end)
  end

  def predict_next_value(seq) do
    differences = get_differences(seq)

    if differences |> Enum.all?(&(&1 == 0)) do
      hd(seq)
    else
      List.last(seq) + predict_next_value(differences)
    end
  end

  def solve(input) do
    input
    |> Stream.map(&parse_line/1)
    |> Stream.map(&predict_next_value/1)
    |> Enum.sum()
  end
end

test_input |> Part1.solve()
```

```elixir
input |> Part1.solve()
```

## Part 2

```elixir
defmodule Part2 do
  def predict_previous_value(seq) do
    differences = Part1.get_differences(seq)

    if differences |> Enum.all?(&(&1 == 0)) do
      hd(seq)
    else
      hd(seq) - predict_previous_value(differences)
    end
  end

  def solve(input) do
    input
    |> Stream.map(&Part1.parse_line/1)
    |> Stream.map(&predict_previous_value/1)
    |> Enum.sum()
  end
end

test_input |> Part2.solve()
```

```elixir
input |> Part2.solve()
```
