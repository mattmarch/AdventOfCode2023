# Day 12

```elixir
# Change working directory to this file's directory.
File.cd(Path.dirname(__ENV__.file))

Mix.install([:combinatorics, :memoize])
```

## Parse input

```elixir
input =
  File.read!("inputs/12.txt")
  |> String.trim_trailing()
  |> String.split("\n")

input
```

```elixir
test_input = [
  "???.### 1,1,3",
  ".??..??...?##. 1,1,3",
  "?#?#?#?#?#?#?#? 1,3,1,6",
  "????.#...#... 4,1,1",
  "????.######..#####. 1,6,5",
  "?###???????? 3,2,1"
]
```

## Part 1

```elixir
defmodule HotSprings do
  def solve(input) do
    input
    |> Stream.map(&parse_line/1)
    |> Stream.map(fn {conds, groups} -> get_combinations(conds, groups) end)
    |> Enum.sum()
  end

  def parse_line(line) do
    [conditions, groups] = String.split(line)
    {String.graphemes(conditions), parse_groups(groups)}
  end

  def parse_groups(groups) do
    groups
    |> String.split(",")
    |> Enum.map(&String.to_integer/1)
  end

  def get_combinations(conditions, groups) do
    total_damaged = Enum.sum(groups)
    total_unknown = conditions |> Enum.count(&(&1 == "?"))
    unknown_damaged = total_damaged - Enum.count(conditions, &(&1 == "#"))

    permutations =
      Combinatorics.binary_combinations(total_unknown)
      |> Stream.filter(fn l -> Enum.count(l, & &1) == unknown_damaged end)
      |> Stream.map(fn l -> l |> Enum.map(&if &1, do: "#", else: ".") end)

    permutations
    |> Stream.map(&substitute_unknowns(conditions, &1))
    |> Enum.count(&matches_groups?(&1, groups))
  end

  def get_damaged_groups(conditions) do
    conditions
    |> Enum.chunk_by(& &1)
    |> Enum.map(fn g -> Enum.count(g, &(&1 == "#")) end)
    |> Enum.filter(&(&1 != 0))
  end

  def matches_groups?(conditions, groups) do
    get_damaged_groups(conditions) == groups
  end

  def substitute_unknowns([], []), do: []

  def substitute_unknowns(["?" | other_conds], [next_sub | other_subs]) do
    [next_sub | substitute_unknowns(other_conds, other_subs)]
  end

  def substitute_unknowns([next_cond | other_conds], subs) do
    [next_cond | substitute_unknowns(other_conds, subs)]
  end
end

test_input |> HotSprings.solve()
```

## Part 1 with the real input (warning: slow)

```elixir
input |> HotSprings.solve()
```

<!-- livebook:{"branch_parent_index":1} -->

## Part 2

```elixir
defmodule HotSprings2 do
  use Memoize

  def solve(input) do
    input
    |> Stream.map(&HotSprings.parse_line/1)
    |> Stream.map(fn {conds, groups} -> {repeat_conds(conds, 5), repeat_groups(groups, 5)} end)
    |> Stream.map(fn {conditions, groups} -> count_possibilities(0, groups, conditions) end)
    |> Enum.sum()
  end

  def repeat_groups(arr, n) do
    arr
    |> List.duplicate(n)
    |> List.flatten()
  end

  def repeat_conds(arr, n) do
    arr
    |> List.duplicate(n)
    |> Enum.map(fn l -> ["?" | l] end)
    |> List.flatten()
    |> Enum.drop(1)
  end

  defmemo(count_possibilities(0, [], []), do: 1)

  defmemo(count_possibilities(n, [n], []), do: 1)

  defmemo(count_possibilities(_n, _groups, []), do: 0)

  defmemo(count_possibilities(n, [], _conditions) when n > 0, do: 0)

  defmemo count_possibilities(0, groups, ["." | other_conditions]) do
    count_possibilities(0, groups, other_conditions)
  end

  defmemo count_possibilities(0, groups, ["#" | other_conditions]) do
    count_possibilities(1, groups, other_conditions)
  end

  defmemo count_possibilities(0, groups, ["?" | other_conditions]) do
    count_possibilities(1, groups, other_conditions) +
      count_possibilities(0, groups, other_conditions)
  end

  defmemo count_possibilities(current_group_length, [next_group | other_groups], [
            "." | other_conditions
          ]) do
    if next_group == current_group_length do
      count_possibilities(0, other_groups, other_conditions)
    else
      0
    end
  end

  defmemo count_possibilities(current_group_length, groups, ["#" | other_conditions]) do
    if hd(groups) > current_group_length do
      count_possibilities(current_group_length + 1, groups, other_conditions)
    else
      0
    end
  end

  defmemo count_possibilities(current_group_length, [next_group | other_groups], [
            "?" | other_conditions
          ]) do
    case current_group_length do
      ^next_group ->
        count_possibilities(0, other_groups, other_conditions)

      count when count < next_group ->
        count_possibilities(count + 1, [next_group | other_groups], other_conditions)
    end
  end
end

test_input |> HotSprings2.solve()
```

```elixir
input |> HotSprings2.solve()
```
