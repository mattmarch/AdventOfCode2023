# Day 02

```elixir
# Change working directory to this file's directory.
File.cd(Path.dirname(__ENV__.file))
```

## Parse input

```elixir
input =
  File.read!("inputs/02.txt")
  |> String.trim_trailing()
  |> String.split("\n")

input
```

```elixir
test_input = [
  "Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green",
  "Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue",
  "Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red",
  "Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red",
  "Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green"
]
```

```elixir
defmodule Parse do
  def parse_line(line) do
    [game_section, draw_section] =
      line |> String.split(": ")

    {parse_game_id(game_section), parse_draws(draw_section)}
  end

  def parse_game_id("Game " <> n), do: String.to_integer(n)

  def parse_draws(draw_section) do
    draw_section
    |> String.split("; ")
    |> Enum.map(&parse_handful/1)
  end

  def parse_handful(hand_section) do
    hand_section
    |> String.split(", ")
    |> Enum.map(&parse_ball_count/1)
  end

  def parse_ball_count(ball_count_section) do
    [n, colour] = ball_count_section |> String.split(" ")
    {colour, String.to_integer(n)}
  end
end

test_game_info =
  test_input |> Enum.map(&Parse.parse_line/1)
```

```elixir
game_info =
  input |> Enum.map(&Parse.parse_line/1)
```

## Part 1

```elixir
defmodule ValidGames do
  @maxRed 12
  @maxGreen 13
  @maxBlue 14

  def valid_ball_set?({"red", n}) when n > @maxRed, do: false
  def valid_ball_set?({"green", n}) when n > @maxGreen, do: false
  def valid_ball_set?({"blue", n}) when n > @maxBlue, do: false
  def valid_ball_set?(_), do: true

  def valid_handful?(ball_sets) do
    ball_sets
    |> Enum.all?(&valid_ball_set?/1)
  end

  def valid_game?({_game_id, draws}) do
    draws
    |> Enum.all?(&valid_handful?/1)
  end

  def solve(game_info) do
    game_info
    |> Stream.filter(&valid_game?/1)
    |> Stream.map(fn {n, _draws} -> n end)
    |> Enum.sum()
  end
end

test_game_info |> ValidGames.solve()
```

```elixir
game_info |> ValidGames.solve()
```

## Part 2

```elixir
defmodule GamePower do
  def game_power({_game_id, draws}) do
    min_red = minimum_of_colour_in_draws(draws, "red")
    min_green = minimum_of_colour_in_draws(draws, "green")
    min_blue = minimum_of_colour_in_draws(draws, "blue")
    min_red * min_green * min_blue
  end

  def minimum_of_colour_in_draws(draws, colour) do
    draws
    |> Enum.map(&number_of_colour_in_handful(&1, colour))
    |> Enum.max()
  end

  def number_of_colour_in_handful(handful, colour) do
    {^colour, n} =
      handful
      |> Enum.find({colour, 0}, fn {c, _n} -> c == colour end)

    n
  end

  def solve(game_info) do
    game_info
    |> Stream.map(&game_power/1)
    |> Enum.sum()
  end
end

test_game_info |> GamePower.solve()
```

```elixir
game_info |> GamePower.solve()
```
