# Day 07

```elixir
# Change working directory to this file's directory.
File.cd(Path.dirname(__ENV__.file))
```

## Parse input

```elixir
input =
  File.read!("inputs/07.txt")
  |> String.trim_trailing()
  |> String.split("\n")

input
```

```elixir
test_input = [
  "32T3K 765",
  "T55J5 684",
  "KK677 28",
  "KTJJT 220",
  "QQQJA 483"
]
```

## Part 1

```elixir
defmodule CamelCards do
  @ordered_cards "AKQJT98765432" |> String.graphemes()

  def parse_line(line) do
    [hand, bet] = line |> String.split()
    {String.graphemes(hand), String.to_integer(bet)}
  end

  def get_hand_rank(hand) do
    card_freqs =
      hand
      |> Enum.frequencies()
      |> Map.values()
      |> Enum.sort(:desc)

    case card_freqs do
      # 5 of a kind
      [5] -> 7
      # 4 of a kind
      [4, 1] -> 6
      # Full house
      [3, 2] -> 5
      # 3 of a kind
      [3, 1, 1] -> 4
      # 2 pair
      [2, 2, 1] -> 3
      # 1 pair
      [2, 1, 1, 1] -> 2
      # High card
      [1, 1, 1, 1, 1] -> 1
    end
  end

  def cardwise_compare([hand1_hd | hand1_tl], [hand2_hd | hand2_tl]) do
    hand1_position = Enum.find_index(@ordered_cards, &(&1 == hand1_hd))
    hand2_position = Enum.find_index(@ordered_cards, &(&1 == hand2_hd))

    if hand1_position == hand2_position do
      cardwise_compare(hand1_tl, hand2_tl)
    else
      hand1_position < hand2_position
    end
  end

  def compare_hands(hand1, hand2) do
    case {get_hand_rank(hand1), get_hand_rank(hand2)} do
      {equal_rank, equal_rank} -> cardwise_compare(hand1, hand2)
      {hand1_rank, hand2_rank} -> hand1_rank > hand2_rank
    end
  end

  def solve(input) do
    input
    |> Enum.map(&parse_line/1)
    |> Enum.sort(fn {hand1, _bet1}, {hand2, _bet2} -> compare_hands(hand1, hand2) end)
    |> Enum.reverse()
    |> Enum.with_index(1)
    |> Enum.map(fn {{_hand, bet}, rank} -> bet * rank end)
    |> Enum.sum()
  end
end

test_input |> CamelCards.solve()
```

```elixir
input |> CamelCards.solve()
```

## Part 2

Copy and pasted from above with a couple of changes:

* `J` moved to bottom of card rankings for card comparisons
* Filter out Jokers when calculating card frequencies, and then add them to the most common card

```elixir
defmodule CamelCards2 do
  @ordered_cards "AKQT98765432J" |> String.graphemes()

  def parse_line(line) do
    [hand, bet] = line |> String.split()
    {String.graphemes(hand), String.to_integer(bet)}
  end

  def get_hand_rank(hand) do
    num_jokers = hand |> Enum.count(&(&1 == "J"))

    card_freqs =
      hand
      |> Enum.reject(&(&1 == "J"))
      |> Enum.frequencies()
      |> Map.values()
      |> Enum.sort(:desc)

    updated_card_freqs =
      case card_freqs do
        # All cards were jokers and filtered out
        [] -> [5]
        freqs -> freqs |> List.update_at(0, &(&1 + num_jokers))
      end

    case updated_card_freqs do
      # 5 of a kind
      [5] -> 7
      # 4 of a kind
      [4, 1] -> 6
      # Full house
      [3, 2] -> 5
      # 3 of a kind
      [3, 1, 1] -> 4
      # 2 pair
      [2, 2, 1] -> 3
      # 1 pair
      [2, 1, 1, 1] -> 2
      # High card
      [1, 1, 1, 1, 1] -> 1
    end
  end

  def cardwise_compare([hand1_hd | hand1_tl], [hand2_hd | hand2_tl]) do
    hand1_position = Enum.find_index(@ordered_cards, &(&1 == hand1_hd))
    hand2_position = Enum.find_index(@ordered_cards, &(&1 == hand2_hd))

    if hand1_position == hand2_position do
      cardwise_compare(hand1_tl, hand2_tl)
    else
      hand1_position < hand2_position
    end
  end

  def compare_hands(hand1, hand2) do
    case {get_hand_rank(hand1), get_hand_rank(hand2)} do
      {equal_rank, equal_rank} -> cardwise_compare(hand1, hand2)
      {hand1_rank, hand2_rank} -> hand1_rank > hand2_rank
    end
  end

  def solve(input) do
    input
    |> Enum.map(&parse_line/1)
    |> Enum.sort(fn {hand1, _bet1}, {hand2, _bet2} -> compare_hands(hand1, hand2) end)
    |> Enum.reverse()
    |> Enum.with_index(1)
    |> Enum.map(fn {{_hand, bet}, rank} -> bet * rank end)
    |> Enum.sum()
  end
end

test_input |> CamelCards2.solve()
```

```elixir
input |> CamelCards2.solve()
```
